/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    /**
     * List Accounts
     * @description Retrieves a list of all Accounts
     */
    get: operations["listAccounts"];
    put?: never;
    /**
     * Create Account
     * @description Creates a new Account.
     */
    post: operations["postAccount"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/me": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    /**
     * Show Me
     * @description Retrieves the current Account.
     */
    get: operations["getAccountMe"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/accounts/{username}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description The account's username */
        username: string;
      };
      cookie?: never;
    };
    /**
     * Show Account
     * @description Retrieves a specific Account by username.
     */
    get: operations["getAccount"];
    put?: never;
    post?: never;
    /** Delete Account */
    delete: operations["deleteAccount"];
    options?: never;
    head?: never;
    /**
     * Update Account
     * @description Updates an existing Account.
     */
    patch: operations["patchAccount"];
    trace?: never;
  };
  "/games": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Games
     * @description Retrieves a list of all games
     */
    get: operations["listGames"];
    put?: never;
    /**
     * Create Game
     * @description Creates a new game.
     */
    post: operations["postGame"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/games/{id}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the game */
        id: number;
      };
      cookie?: never;
    };
    /**
     * Show Game
     * @description Retrieves a specific game by ID.
     */
    get: operations["getGame"];
    put?: never;
    post?: never;
    /**
     * Delete Game
     * @description Deletes a game by ID.
     */
    delete: operations["deleteGame"];
    options?: never;
    head?: never;
    /**
     * Update Game
     * @description Updates a game by ID.
     */
    patch: operations["patchGame"];
    trace?: never;
  };
  "/tournaments/{tournament_id}/matches": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Tournament ID */
        tournament_id: string;
      };
      cookie?: never;
    };
    /** Retrieves all matches for a tournament */
    get: {
      parameters: {
        query?: never;
        header?: {
          /** @description Vercel OIDC Token */
          "X-Vercel-OIDC-Token"?: string;
        };
        path: {
          /** @description Tournament ID */
          tournament_id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description matches found */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Match"][];
          };
        };
        /** @description tournament not found */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/matches/{id}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Tournament ID */
        tournament_id: string;
        /** @description Match ID */
        id: string;
      };
      cookie?: never;
    };
    /** Retrieves a match */
    get: {
      parameters: {
        query?: never;
        header?: {
          /** @description Vercel OIDC Token */
          "X-Vercel-OIDC-Token"?: string;
        };
        path: {
          /** @description Tournament ID */
          tournament_id: string;
          /** @description Match ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description match found */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["MatchDetails"];
          };
        };
        /** @description match not found */
        404: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Updates a match */
    patch: {
      parameters: {
        query?: never;
        header?: {
          /** @description Vercel OIDC Token */
          "X-Vercel-OIDC-Token"?: string;
        };
        path: {
          /** @description Tournament ID */
          tournament_id: string;
          /** @description Match ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "application/json": {
            match: {
              round_id?: number;
              table_number?: number;
              player_one_id?: number;
              player_two_id?: number;
              winner_id?: number;
              loser_id?: number;
              player_one_check_in?: boolean;
              player_two_check_in?: boolean;
              phase_id?: number;
              bye?: boolean;
            };
          };
        };
      };
      responses: {
        /** @description match updated */
        200: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description invalid request */
        422: {
          headers: Record<string, unknown>;
          content?: never;
        };
      };
    };
    trace?: never;
  };
  "/tournaments/{tournament_id}/matches/{id}/check_in": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Tournament ID */
        tournament_id: string;
        /** @description Match ID */
        id: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check in */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Vercel OIDC Token */
          "X-Vercel-OIDC-Token"?: string;
        };
        path: {
          /** @description Tournament ID */
          tournament_id: string;
          /** @description Match ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description checked in */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["MatchDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/matches/{id}/reset": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Tournament ID */
        tournament_id: string;
        /** @description Match ID */
        id: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Reset Match */
    post: {
      parameters: {
        query?: never;
        header?: {
          /** @description Vercel OIDC Token */
          "X-Vercel-OIDC-Token"?: string;
        };
        path: {
          /** @description Tournament ID */
          tournament_id: string;
          /** @description Match ID */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description reported */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["MatchDetails"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizations": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    /** List Organizations */
    get: operations["listOrganizations"];
    put?: never;
    /**
     * Create Organization
     * @description Creates a new organization.
     */
    post: operations["postOrganization"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizations/{slug}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    /**
     * Show Organization
     * @description Retrieves a specific organization.
     */
    get: operations["getOrganization"];
    put?: never;
    post?: never;
    /**
     * Delete Organization
     * @description Deletes an organization.
     */
    delete: operations["deleteOrganization"];
    options?: never;
    head?: never;
    /**
     * Update Organization
     * @description Updates an existing organization.
     */
    patch: operations["patchOrganization"];
    trace?: never;
  };
  "/organizations/{slug}/staff": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    /**
     * List Organization Staff
     * @description Retrieves a list of staff members for a specific organization.
     */
    get: operations["listOrganizationStaff"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/organizations/{slug}/tournaments": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    /**
     * List Organization Tournaments
     * @description Retrieves a list of tournaments for a specific organization.
     */
    get: operations["listOrganizationTournaments"];
    put?: never;
    /**
     * Create Tournament
     * @description Creates a new tournament for a given organization.
     */
    post: operations["postOrganizationTournament"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/phases": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    /**
     * List Tournament Phases
     * @description Retrieves a list of all Phases
     */
    get: operations["listTournamentPhases"];
    put?: never;
    /**
     * Create Tournament Phase
     * @description Creates a new Tournament Phase.
     */
    post: operations["postTournamentPhase"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/phases/{id}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
        /** @description ID of the Phase */
        id: number;
      };
      cookie?: never;
    };
    /**
     * Show Tournament Phase
     * @description Retrieves a Tournament Phase
     */
    get: operations["showTournamentPhase"];
    put?: never;
    post?: never;
    /**
     * Delete Tournament Phase
     * @description Deletes a Tournament Phase.
     */
    delete: operations["deleteTournamentPhase"];
    options?: never;
    head?: never;
    /**
     * Update Tournament Phase
     * @description Updates a Tournament Phase.
     */
    patch: operations["patchTournamentPhase"];
    trace?: never;
  };
  "/tournaments/{tournament_id}/players": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    /**
     * List Tournament Players
     * @description Retrieves a list of all Players
     */
    get: operations["listPlayers"];
    put?: never;
    /**
     * Create Tournament Player
     * @description Creates a new Player.
     */
    post: operations["postTournamentPlayer"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/players/{id}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
        /** @description ID of the Player */
        id: number;
      };
      cookie?: never;
    };
    /**
     * Show Tournament Player
     * @description Retrieves a Player
     */
    get: operations["showTournamentPlayer"];
    put?: never;
    post?: never;
    /**
     * Delete Tournament Player
     * @description Deletes a Player.
     */
    delete: operations["deleteTournamentPlayer"];
    options?: never;
    head?: never;
    /**
     * Update Tournament Player
     * @description Updates a Player.
     */
    patch: operations["putTournamentPlayer"];
    trace?: never;
  };
  "/pokemon_teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List published and NotArchived Pokemon Teams
     * @description Retrieves a list of all public and not archived pokemon teams
     */
    get: operations["listPokemonTeams"];
    put?: never;
    /**
     * Create Pokemon Team
     * @description Creates a new pokemon team.
     */
    post: operations["postPokemonTeam"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieves all profiles */
    get: operations["listProfiles"];
    put?: never;
    /**
     * Creates a profile
     * @description Creates a new profile
     */
    post: operations["createProfile"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profiles/{slug}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Username */
        slug: string;
      };
      cookie?: never;
    };
    /** Retrieves a profile */
    get: operations["getProfile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    /**
     * List Organization Tournaments
     * @description Retrieves a list of all Tournaments
     */
    get: operations["listTournaments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    /**
     * Show Tournament
     * @description Retrieves a specific Tournament.
     */
    get: operations["getTournament"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tournaments/{tournament_id}/start": {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Start Tournament
     * @description Starts a specific Tournament.
     */
    post: operations["startTournament"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** account */
    Account: {
      username: string;
      pronouns: string;
      image_url?: string | null;
      country?: string | null;
      /** Format: int64 */
      id: number;
    };
    /** Account Details */
    AccountDetails: {
      username: string;
      pronouns: string;
      image_url?: string | null;
      country: string | null;
      email: string;
      first_name: string;
      last_name: string;
      /** Format: int64 */
      id: number;
    };
    /** Account Me */
    AccountMe: {
      username: string;
      pronouns: string;
      image_url?: string | null;
      country: string | null;
      email: string;
      first_name: string;
      last_name: string;
      /** Format: int64 */
      id: number;
      organizations: components["schemas"]["Organization"][];
      admin: boolean;
    };
    /** Account Request */
    AccountPostRequest: {
      username: string;
      pronouns: string;
      image_url?: string | null;
      country: string | null;
      email: string;
      first_name: string;
      last_name: string;
      /** Format: int64 */
      id?: number;
    };
    /** Account Request */
    AccountRequest: {
      username: string;
      pronouns: string;
      image_url?: string | null;
      country: string | null;
      email: string;
      first_name: string;
      last_name: string;
      /** Format: int64 */
      id?: number;
    };
    /** Format */
    Format: {
      /** Format: int64 */
      id?: number;
      name?: string;
    };
    /** Game */
    Game: {
      /** Format: int64 */
      id: number;
      name: string;
    };
    /** Game Details */
    GameDetail: {
      /** Format: int64 */
      id: number;
      name: string;
      formats: components["schemas"]["Format"][];
    };
    /** GameRequest */
    GameRequest: {
      /** Format: int64 */
      id?: number;
      name: string;
    };
    /** Match */
    Match: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      round_id: number;
      /** Format: int64 */
      tournament_id?: number;
      /** Format: int64 */
      table_number: number;
      player_one: string;
      player_two: string;
      reset_by: string | null;
    };
    /** Match */
    MatchDetails: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      round_id: number;
      /** Format: int64 */
      tournament_id?: number;
      /** Format: int64 */
      table_number: number;
      player_one: string;
      player_two: string;
      reset_by: string | null;
      winner: string | null;
      loser: string | null;
      /** Format: date-time */
      player_one_check_in: string | null;
      /** Format: date-time */
      player_two_check_in: string | null;
      /** Format: date-time */
      ended_at: string | null;
      /** Format: date-time */
      started_at: string | null;
      bye: boolean;
    };
    /** Organization */
    Organization: {
      owner: components["schemas"]["Account"];
      description: string | null;
      /** Format: uri */
      logo_url: string | null;
      partner?: boolean;
      slug: string;
      /** Format: int64 */
      id: number;
      name: string;
    };
    /** Pokemon */
    Pokemon: {
      /** Format: integer */
      position?: number;
      species: string;
      nickname?: string | null;
      gender?: string;
      shiny?: boolean;
      ability: string;
      tera_type: string;
      nature: string;
      form: string | null;
      item: string | null;
      move1: string | null;
      move2: string | null;
      move3: string | null;
      move4: string | null;
      /** Format: int64 */
      pokemon_team_id?: number;
      evs?: components["schemas"]["Stats"];
      ivs?: components["schemas"]["Stats"];
    };
    /** Pokemon Team */
    PokemonTeam: {
      /** Format: int64 */
      id: number;
      name: string;
      pokepaste_id?: string | null;
      profile: components["schemas"]["Profile"];
      published: boolean;
      /** Format: date-time */
      archived_at: string | null;
      format: components["schemas"]["Format"];
      game: components["schemas"]["Game"];
      pokemon: components["schemas"]["Pokemon"][];
    };
    /** Player Request */
    PlayerRequest: {
      /** Format: int64 */
      profile_id: number;
      in_game_name: string;
    };
    /** Player */
    Player: {
      /** Format: int64 */
      id: number;
      profile: components["schemas"]["Profile"];
      in_game_name: string;
      show_country_flag?: boolean;
    };
    /** Player Details */
    PlayerDetails: {
      /** Format: int64 */
      id: number;
      profile: components["schemas"]["Profile"];
      in_game_name: string;
      show_country_flag?: boolean;
    };
    /** Round */
    Round: {
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      phase_id: number;
      /** Format: int64 */
      round_number: number;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      ended_at: string | null;
    };
    /** Phase */
    Phase: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      order: number;
      type?: string;
      /** Format: int64 */
      tournament_id: number;
      number_of_rounds: number;
      best_of: number;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      ended_at: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    /** Phase Details */
    PhaseDetails: {
      /** Format: int64 */
      id: number;
      name: string;
      /** Format: int64 */
      order: number;
      type?: string;
      /** Format: int64 */
      tournament_id: number;
      number_of_rounds: number;
      best_of: number;
      /** Format: date-time */
      started_at: string | null;
      /** Format: date-time */
      ended_at: string | null;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
      players: components["schemas"]["Player"][];
      rounds: components["schemas"]["Round"][];
    };
    Pagination: {
      current_page: number;
      next_page: number | null;
      prev_page: number | null;
      total_pages: number;
      total_count: number;
    };
    /** Profile */
    Profile: {
      /** Format: int64 */
      id: number;
      default: boolean;
      username: string;
      image_url: string | null;
      pronouns: string | null;
    };
    /** Post Profile */
    PostProfile: {
      username: string;
      image_url?: string | null;
      pronouns?: string | null;
    };
    /** Registration Response */
    RegistrationResponse: {
      /** Format: int64 */
      id: number;
      /** Format: email */
      email: string;
      username: string;
      first_name: string;
      last_name: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      pronouns: string | null;
      /** Format: jwt */
      jti: string;
      name: string | null;
      image: string | null;
      admin?: boolean;
    };
    /** Stats */
    Stats: {
      hp?: number | null;
      atk?: number | null;
      def?: number | null;
      spa?: number | null;
      spd?: number | null;
      spe?: number | null;
    };
    /** Tournament */
    Tournament: {
      /** Format: date-time */
      start_at: string | null;
      organization: components["schemas"]["Organization"];
      format: components["schemas"]["Format"];
      game: components["schemas"]["Game"];
      /** Format: int64 */
      id: number;
      name: string;
      player_cap: number | null;
      player_count: number;
      /** Format: date-time */
      end_at?: string | null;
      /** Format: date-time */
      started_at?: string | null;
      /** Format: date-time */
      ended_at?: string | null;
      /** Format: date-time */
      registration_start_at: string | null;
      /** Format: date-time */
      registration_end_at: string | null;
      late_registration: boolean;
      published: boolean;
    };
    /** Tournament Details */
    TournamentDetails: {
      /** Format: int64 */
      id: number;
      name: string;
      autostart: boolean;
      /** Format: date-time */
      start_at: string | null;
      /** Format: date-time */
      end_at?: string | null;
      organization: components["schemas"]["Organization"];
      format: components["schemas"]["Format"];
      game: components["schemas"]["Game"];
      /** Format: date-time */
      check_in_start_at: string | null;
      late_registration: boolean;
      teamlists_required: boolean;
      open_team_sheets: boolean;
      phases?: components["schemas"]["Phase"][];
      player_cap: number | null;
      player_count: number;
      /** Format: date-time */
      started_at?: string | null;
      /** Format: date-time */
      ended_at?: string | null;
      /** Format: date-time */
      registration_start_at: string | null;
      /** Format: date-time */
      registration_end_at: string | null;
      published: boolean;
    };
    /** Tournament Request */
    TournamentRequest: {
      /** Format: int64 */
      id?: number;
      name: string;
      /** Format: int64 */
      game_id: number;
      /** Format: int64 */
      format_id: number;
      autostart: boolean;
      /** Format: date-time */
      start_at: string;
      player_cap: number | null;
      /** Format: date-time */
      registration_start_at: string | null;
      /** Format: date-time */
      registration_end_at: string | null;
      late_registration: boolean;
      /** Format: date-time */
      check_in_start_at: string | null;
      open_team_sheets: boolean;
      teamlists_required: boolean;
    };
    /** Tournament Post Request */
    TournamentPostRequest: {
      /** Format: int64 */
      organization_id: number;
      name: string;
      /** Format: int64 */
      game_id: number;
      /** Format: int64 */
      format_id: number;
      autostart: boolean;
      /** Format: date-time */
      start_at?: string;
      player_cap: number | null;
      /** Format: date-time */
      registration_start_at: string | null;
      /** Format: date-time */
      registration_end_at: string | null;
      late_registration: boolean;
      /** Format: date-time */
      check_in_start_at: string | null;
      open_team_sheets: boolean;
      teamlists_required: boolean;
    };
    Error: {
      error: string;
    };
    Message: {
      message: string;
    };
  };
  responses: {
    /** @description not found */
    NotFound: {
      headers: Record<string, unknown>;
      content?: never;
    };
  };
  parameters: {
    /** @description Page number for pagination */
    Page: number;
    /** @description Number of items per page for pagination */
    PerPage: number;
    /** @description Vercel OIDC Token */
    VercelTokenHeader: string;
    PokemonTeam: {
      pokepaste_id?: string | null;
      /** Format: int64 */
      profile_id?: number | null;
      name: string;
      /** Format: int64 */
      game_id: number;
      /** Format: int64 */
      format_id: number;
      pokemon: components["schemas"]["Pokemon"][];
    };
    Profile: {
      username: string;
      image_url?: string | null;
      pronouns?: string | null;
    };
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  listAccounts: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Account"][];
        };
      };
    };
  };
  postAccount: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AccountPostRequest"];
      };
    };
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["AccountDetails"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            error?: string;
          };
        };
      };
      /** @description unprocessable entity */
      422: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  getAccountMe: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["AccountMe"];
        };
      };
      /** @description not authorized */
      401: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  getAccount: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description The account's username */
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["AccountDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  deleteAccount: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description The account's username */
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content?: never;
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  patchAccount: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description The account's username */
        username: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["AccountDetails"];
      };
    };
    responses: {
      /** @description Updated by Admin */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["AccountDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listGames: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            data?: components["schemas"]["Game"][];
            meta?: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  postGame: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Game"];
      };
    };
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["GameDetail"];
        };
      };
      /** @description bad request */
      400: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getGame: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the game */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["GameDetail"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  deleteGame: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the game */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  patchGame: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the game */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Game"];
      };
    };
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["GameDetail"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listOrganizations: {
    parameters: {
      query: {
        /** @description Page number for pagination */
        page: number;
        /** @description Number of items per page for pagination */
        per_page: number;
        partner?: boolean;
      };
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            data?: components["schemas"]["Organization"][];
            meta?: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  postOrganization: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Organization"];
      };
    };
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getOrganization: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  deleteOrganization: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Organization deleted */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description forbidden */
      403: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  patchOrganization: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Organization"];
      };
    };
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listOrganizationStaff: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Account"][];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listOrganizationTournaments: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TournamentDetails"][];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  postOrganizationTournament: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["TournamentDetails"];
      };
    };
    responses: {
      /** @description Created by Org Owner */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TournamentDetails"];
        };
      };
      /** @description bad request */
      400: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listTournamentPhases: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Phase"][];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  postTournamentPhase: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Phase"];
      };
    };
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PhaseDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  showTournamentPhase: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
        /** @description ID of the Phase */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PhaseDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  deleteTournamentPhase: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
        /** @description ID of the Phase */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content?: never;
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  patchTournamentPhase: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the tournament */
        tournament_id: number;
        /** @description ID of the Phase */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["Phase"];
      };
    };
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PhaseDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listPlayers: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Player"][];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  postTournamentPlayer: {
    parameters: {
      query: {
        in_game_name: string;
        profile_id: number;
        pokemon_team_id?: number;
        show_country_flag: boolean;
      };
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PlayerDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
      /** @description Already registered */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  showTournamentPlayer: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
        /** @description ID of the Player */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PlayerDetails"];
        };
      };
    };
  };
  deleteTournamentPlayer: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
        /** @description ID of the Player */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content?: never;
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  putTournamentPlayer: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
        /** @description ID of the Player */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        "application/json": components["schemas"]["PlayerRequest"];
      };
    };
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PlayerDetails"];
        };
      };
    };
  };
  listPokemonTeams: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PokemonTeam"][];
        };
      };
    };
  };
  postPokemonTeam: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          pokepaste_id?: string | null;
          /** Format: int64 */
          profile_id?: number | null;
          name: string;
          /** Format: int64 */
          game_id: number;
          /** Format: int64 */
          format_id: number;
          pokemon: components["schemas"]["Pokemon"][];
        };
      };
    };
    responses: {
      /** @description created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["PokemonTeam"];
        };
      };
      /** @description unprocessable entity */
      422: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listProfiles: {
    parameters: {
      query?: {
        /** @description Account ID */
        account_id?: number;
      };
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description lists profiles */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Profile"][];
        };
      };
    };
  };
  createProfile: {
    parameters: {
      query: {
        /** @description Username */
        user_name: string;
        /** @description Image URL */
        image_url?: string;
      };
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description profile created */
      201: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description invalid request */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            error: string[];
          };
        };
      };
    };
  };
  getProfile: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description Username */
        slug: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description profile found */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description profile not found */
      404: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            error: string;
          };
        };
      };
    };
  };
  listTournaments: {
    parameters: {
      query: {
        /** @description Page number for pagination */
        page: number;
        /** @description Number of items per page for pagination */
        per_page: number;
      };
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": {
            data?: components["schemas"]["Tournament"][];
            meta?: components["schemas"]["Pagination"];
          };
        };
      };
    };
  };
  getTournament: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TournamentDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  startTournament: {
    parameters: {
      query?: never;
      header?: {
        /** @description Vercel OIDC Token */
        "X-Vercel-OIDC-Token"?: string;
      };
      path: {
        /** @description ID of the Tournament */
        tournament_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["TournamentDetails"];
        };
      };
      /** @description not found */
      404: {
        headers: Record<string, unknown>;
        content?: never;
      };
      /** @description Unprocessable Entity */
      422: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
